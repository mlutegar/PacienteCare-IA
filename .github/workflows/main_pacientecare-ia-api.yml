name: Build and deploy Python app to Azure Web App - pacientecare-ia-api (Docker)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: 'ubuntu-latest'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Fazer login no Azure Container Registry (ACR) usando o Azure CLI (sem expor secrets)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry (ACR)
        run: |
          az acr login --name pacientecareregistry

      # Construir e enviar a imagem para o ACR
      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: pacientecareregistry.azurecr.io/pacientecare-ia-api:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'

    steps:
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'pacientecare-ia-api'
          slot-name: 'production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
          images: 'pacientecareregistry.azurecr.io/pacientecare-ia-api:${{ github.sha }}'

      # Adicionando a OpenAI API Key como variável de ambiente no container
      - name: Set OpenAI API Key
        run: echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV

      # Adicionando a Azure Blob Storage Connection String como variável de ambiente no container
      - name: Set Azure Blob Storage Connection String
        run: echo "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" >> $GITHUB_ENV
